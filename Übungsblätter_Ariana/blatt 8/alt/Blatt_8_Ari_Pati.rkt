#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 55 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 594 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 24 #"se3-bib/setkarten-module"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 46 #";;; 1 Funktionen h\303\266herer Ordnung und Closures"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 68
(
 #";;  1.1 Wann ist eine Racket-Funktion eine Funktion h\303\266hrer Or"
 #"dnung?"
) 0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";   Wenn sie als Argument eine Fu"
 #"nktion erhalten oder als Wert zur\303\274ckgeben."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;  1.2 Welche der folgenden Funktionen sind Funktionen h\303\266her"
 #"er Ordnung?"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";  (a) foldr"
0 0 24 29 1 #"\n"
0 0 17 3 128
(
 #";  foldr ist eine Funktion h\303\266herer Ordnung, da sie als Argume"
 #"nt einen Operator \303\274bergeben bekommt, der eine Funktion darste"
 #"llt."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";  (b) (define (plus-oder-minus x)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";           (if (< x 0)"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";                  'Plus     ; Plus und Minus m\303\274ssten eigentl"
 #"ich getauscht werden"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";                  'Minus))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 171
(
 #";  plus-oder-minus ist keine Funktion h\303\266herer Ordnung, da sie"
 #" als Argument lediglich eine Zahl erhalten kann (da nur eine Zahl in"
 #" die if-Bedingung eingesetzt werden kann)"
) 0 0 24 29 1 #"\n"
0 0 17 3 7 #";   und"
0 0 17 3 1 #" "
0 0 17 3 3 #"als"
0 0 17 3 1 #" "
0 0 17 3 13 #"R\303\274ckgabewert"
0 0 17 3 4 #" nur"
0 0 17 3 1 #" "
0 0 17 3 3 #"ein"
0 0 17 3 1 #" "
0 0 17 3 6 #"Symbol"
0 0 17 3 2 #" ("
0 0 17 3 1 #"'"
0 0 17 3 4 #"Plus"
0 0 17 3 1 #" "
0 0 17 3 4 #"oder"
0 0 17 3 2 #" '"
0 0 17 3 5 #"Minus"
0 0 17 3 21 #") herausgegeben wird."
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";  (c) (define (masala f arg1)"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";          (lambda (arg2)"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";               ("
0 0 17 3 1 #"f"
0 0 17 3 1 #" "
0 0 17 3 4 #"arg1"
0 0 17 3 1 #" "
0 0 17 3 7 #"arg2)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 117
(
 #";  masala ist eine Funktion h\303\266herer Ordnung, da sie als Argum"
 #"ent die Funktion f (einen Operator) \303\274bergeben bekommt."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";  (d) (define (flip f)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";          (lambda (x y) (f y x)))"
0 0 24 29 1 #"\n"
0 0 17 3 108
(
 #";   flip ist eine Funktion h\303\266herer Ordnung, da sie die Funkti"
 #"on f (einen Operator) als Argument \303\274bergeben."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;  1.3"
0 0 24 29 1 #"\n"
0 0 17 3 170
(
 #";   Zun\303\244chst wird der Operator / an das Argument f gebunden u"
 #"nd die Zahl 1 an das Argument arg1. Dann wird die Zahl 3 an das Argu"
 #"ment arg2 der inneren Funktion gebunden."
) 0 0 24 29 1 #"\n"
0 0 17 3 135
(
 #";   Bei der Ausf\303\274hrung des Aufrufes wird nun folgendes ausgew"
 #"ertet: (f arg1 arg2) und damit durch die Bindungen der Argumente (/ "
 #"1 3)."
) 0 0 24 29 1 #"\n"
0 0 17 3 30 #";   Als Ergebnis folgt darauf "
0 8          10 17 4 #"1/3\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #"."
0 0 24 29 1 #"\n"
0 0 17 3 32 #";   In Racket lassen sich Zahlen"
0 0 17 3 1 #" "
0 0 17 3 3 #"und"
0 0 17 3 1 #" "
0 0 17 3 38 #"Listen durch Closures repr\303\244sentieren."
0 0 24 29 1 #"\n"
0 0 17 3 16 #";   Man k\303\266nnte "
0 0 17 3 2 #"an"
0 0 17 3 1 #" "
0 0 17 3 6 #"Stelle"
0 0 17 3 1 #" "
0 0 17 3 3 #"der"
0 0 17 3 1 #" "
0 0 17 3 4 #"Zahl"
0 0 17 3 1 #" "
0 8          10 17 4 #"1/3\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 17 3 1 #" "
0 0 17 3 4 #"auch"
0 0 17 3 1 #" "
0 0 17 3 3 #"den"
0 0 17 3 1 #" "
0 0 17 3 6 #"Aufruf"
0 0 17 3 3 #" (("
0 0 17 3 6 #"masala"
0 0 17 3 1 #" "
0 0 17 3 1 #"/"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #") "
0 0 17 3 1 #"3"
0 0 17 3 12 #") schreiben,"
0 0 17 3 1 #" "
0 0 17 3 2 #"da"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 4 #"sich"
0 0 17 3 1 #" "
0 0 17 3 4 #"hier"
0 0 17 3 1 #" "
0 0 17 3 2 #"um"
0 0 17 3 1 #" "
0 0 17 3 3 #"ein"
0 0 17 3 1 #" "
0 0 17 3 16 #"Closure handelt."
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 17 3 8 #";;  1.4 "
0 0 24 29 1 #"\n"
0 0 17 3 33 #";  (foldl (curry * 3) 1 '(1 2 3))"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";  -> 162"
0 0 24 29 1 #"\n"
0 0 17 3 137
(
 #";  Begr\303\274ndung: Indem foldl als Argument die Funktion (curry *"
 #" 3) \303\274bergeben wird, wird jedes Element der Liste erst mit 3 m"
 #"ultipliziert,"
) 0 0 24 29 1 #"\n"
0 0 17 3 98
(
 #";  bevor alle Elemente (von links nach rechts) miteinander multipliz"
 #"iert werden. (3 * 6 * 9 = 162)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";  (map (flip cons) '(1 2 3) '(3 2 1)) "
0 0 24 29 1 #"\n"
0 0 17 3 32 #";  -> '((3 . 1) (2 . 2) (1 . 3))"
0 0 24 29 1 #"\n"
0 0 17 3 161
(
 #";  Begr\303\274ndung: Durch map wird aus je dem ersten, zweiten und "
 #"dritten Elementen der beiden Listen  in der flip-Funktion durch die "
 #"cons-Anweisung ein Pair gebaut."
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";  (map (compose (curryr / 1.8) (curry - 32))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";          '(9941 212 32 -469.67))"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";  '(-5505.0 -100.0 0 278.7055555555556)"
0 0 24 29 1 #"\n"
0 0 17 3 193
(
 #";  Begr\303\274ndung: Compose wendet jede Funktion, die \303\274ber "
 #"Curry \303\274bergeben wurden, beginnend bei der letzten, auf die Li"
 #"ste an. \303\234ber map wird sie auf jedes Element der Liste angewan"
 #"dt. Erst wird"
) 0 0 24 29 1 #"\n"
0 0 17 3 85
(
 #";  jedes Element der Liste von 32 abgezogen, das Ergebnis wird dann "
 #"durch 1.8 geteilt"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";  @ARI"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";  FRAGE: Warum ist die Zahl negativ????"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  ANTWORT:"
0 0 17 3 1 #" "
0 0 17 3 2 #"Es"
0 0 17 3 1 #" "
0 0 17 3 4 #"wird"
0 0 17 3 1 #" "
0 0 17 3 5 #"nicht"
0 0 17 3 1 #" "
0 0 17 3 2 #"32"
0 0 17 3 1 #" "
0 0 17 3 4 #"von "
0 0 17 3 6 #"jedem "
0 0 17 3 7 #"Element"
0 0 17 3 1 #" "
0 0 17 3 9 #"abgezogen"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 7 #"sondern"
0 0 17 3 1 #" "
0 0 17 3 5 #"jedes"
0 0 17 3 1 #" "
0 0 17 3 7 #"Element"
0 0 17 3 1 #" "
0 0 17 3 4 #"wird"
0 0 17 3 1 #" "
0 0 17 3 3 #"von"
0 0 17 3 1 #" "
0 0 17 3 2 #"32"
0 0 17 3 1 #" "
0 0 17 3 9 #"abgezogen"
0 0 17 3 1 #" "
0 0 17 3 4 #"weil"
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 5 #"curry"
0 0 17 3 1 #" "
0 0 17 3 3 #"und"
0 0 17 3 1 #" "
0 0 17 3 5 #"nicht"
0 0 17 3 1 #" "
0 0 17 3 6 #"curryr"
0 0 17 3 1 #" "
0 0 17 3 5 #"ist. "
0 0 17 3 2 #";)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";;; 2 Einfache funktionale Ausdr\303\274cke h\303\266herer Ordnung"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"-1"
0 0 24 3 1 #" "
0 0 21 3 2 #"-2"
0 0 24 3 1 #" "
0 0 21 3 3 #"-10"
0 0 24 3 1 #" "
0 0 21 3 3 #"-13"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 3 1 #" "
0 0 21 3 2 #"20"
0 0 24 3 1 #" "
0 0 21 3 2 #"26"
0 0 24 3 1 #" "
0 0 21 3 2 #"30"
0 0 24 3 1 #" "
0 0 21 3 2 #"39"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";;  2.1 Geben Sie einen Ausdruck "
 #"an, der die Liste der Absolutbetr\303\244ge aller Zahlen der Liste x"
 #"s berechnet"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; @ARI"
0 0 24 29 1 #"\n"
0 0 17 3 3 #"; ("
0 0 17 3 5 #"foldr"
0 0 17 3 1 #" "
0 0 17 3 1 #"+"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 90
(
 #"xs) ; Das gibt doch die Summer aller Zahlen in der Liste aus... ist "
 #"das nicht was anderes?"
) 0 0 24 29 1 #"\n"
0 0 17 3 5 #"; Ich"
0 0 17 3 1 #" "
0 0 17 3 6 #"dachte"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 2 #"es"
0 0 17 3 1 #" "
0 0 17 3 6 #"sollte"
0 0 17 3 1 #" "
0 0 17 3 5 #"eine "
0 0 17 3 5 #"Liste"
0 0 17 3 1 #" "
0 0 17 3 12 #"herauskommen"
0 0 17 3 1 #","
0 0 17 3 1 #" "
0 0 17 3 3 #"die"
0 0 17 3 1 #" "
0 0 17 3 87
(
 #"die Absolutbetr\303\244ge (also z.B. f\303\274r -9 9, f\303\274r -5 "
 #"5 usw.) aller Zahlen enth\303\244lt. Daher:"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 3 #"abs"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; ->"
0 0 17 3 46 #" '(1 2 10 13 1 2 3 4 5 6 12 13 14 20 26 30 39)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 111
(
 #";; 2.2 Geben Sie einen Ausdruck an, der die Teilliste aller glatt du"
 #"rch 13 teilbaren Zahlen von xs konstruiert."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 5 #"curry"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #")("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 14 3 6 #"curryr"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #") "
0 0 14 3 2 #"xs"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 4 #"; ->"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 1 #"("
0 0 17 3 3 #"-13"
0 0 17 3 4 #" 13 "
0 0 17 3 2 #"26"
0 0 17 3 4 #" 39)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";; 2.3 Geben Sie einen Ausdruck an, der die Summe der geraden Zahlen"
 #" gr\303\266\303\237er 3 in xs ermittelt."
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 5 #"foldl"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 9 #"positive?"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 5 #"even?"
0 0 24 3 2 #" ("
0 0 14 3 7 #"remove*"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sort"
0 0 24 3 1 #" "
0 0 14 3 2 #"xs"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; -> 112"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";;; 3 Spieltheorie: Das Kartenspiel SET!"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;  3.1"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 5 #"waves"
0 0 24 3 1 #" "
0 0 14 3 4 #"oval"
0 0 24 3 1 #" "
0 0 14 3 9 #"rectangle"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 7 #"outline"
0 0 24 3 1 #" "
0 0 14 3 5 #"solid"
0 0 24 3 1 #" "
0 0 14 3 7 #"hatched"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 3 #"red"
0 0 24 3 1 #" "
0 0 14 3 5 #"green"
0 0 24 3 1 #" "
0 0 14 3 4 #"blue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"attributes"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"card"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";(card 2 'waves 'outline 'red)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #";;  3.2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"card-deck"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"for*/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"visualize-deck"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 9 #"for*/list"
0 0 24 3 3 #" (["
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 11 #"the-pattern"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-mode"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ["
0 0 14 3 1 #"l"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-color"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 13 #"show-set-card"
0 0 24 3 1 #" "
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"j"
0 0 24 3 1 #" "
0 0 14 3 1 #"k"
0 0 24 3 1 #" "
0 0 14 3 1 #"l"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
