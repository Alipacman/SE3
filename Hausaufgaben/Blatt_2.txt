#lang racket

;; Blatt 2

;; TODO: Begründungen Aufgabe 1 fertig machen, pi richtig berechnen?!, wie viele Rekurrenzschritte braucht e

; Aufgabe 1
(define wuff 'Flocki)
(define Hund wuff)
(define Wolf 'wuff)

(define (welcherNameGiltWo PersonA PersonB)
  (let (( PersonA 'Zaphod)
        (PersonC PersonA))
    PersonC))

(define xs1 '(0 2 3 wuff Hund))
(define xs2 (list wuff Hund))
(define xs3 (cons Hund wuff))

; wuff -> 'Flocki
; Begründung: wuff ist das Symbol 'Flocki zugewiesen
; Hund -> 'Flocki
; Begründung: Hund ist die Definition wuff zugewiesen, und wuff wird das Symbol 'Flocki zugewiesen
; Wolf -> 'wuff
; Begründung: Wolf ist das Symbol 'wuff zugewiesen
; (quote Hund) -> 'Hund
; Begründung: die quote-Anweisung macht aus Hund das Symbol 'Hund
; (eval Wolf) -> 'Flocki
; Begründung: die eval-Anweisung wertet das Symbol 'wuff, das Wolf zugewiesen ist, zu wuff aus und wuff ist das Symbol 'Flocki zugewiesen
; (eval Hund) -> Flocki: undefined
; Begründung: die eval-Anweisung wertet das Symbol 'Flocki, das Hund zugewiesen ist, zu Flocki aus; dann wird aber kein Wert gefunden, der Flocki zugewiesen wird
; (eval 'Wolf) -> 'wuff
; Begründung:  die eval-Anweisung wertet das Symbol 'Wolf zu Wolf aus und gibt daher das Symbol 'wuff aus, das Wolf zugewiesen ist
; (welcherNameGiltWo 'lily 'potter) -> 'lily
; Begründung: die Bindungen der Variablen werden nicht sequenziell in Abhängigkeit voneinander vorgenommen, daher wird am Ende PersonC ausgegeben, der PersonA (also 'lily) zugewiesen wurde und nicht 'Zaphod, obwohl 'Zaphod vorher PersonA zugewiesen wurde
; (cdddr xs1) -> '(wuff Hund)
; Begründung: Es wird die Liste xs1 ab dem vierten Element ausgegeben
; (cdr xs2) -> '(Flocki)
; (cdr xs3) -> 'Flocki
; (sqrt 1/4) -> 1/2
; (eval '( welcherNameGiltWo 'Wolf 'Hund)) -> 'Wolf
; (eval (welcherNameGiltWo 'Hund 'Wolf )) -> 'Flocki

; Aufgabe 2.1
(define (natural? n)
  (and (integer? n)
       (>= n 0)))

(define (fakultät x)
  (if (natural? x)
      (if (> x 0) (* x (fakultät (- x 1))) 1)
      false))

; Aufgabe 2.2
(define (power r n)
  (if (and (rational? r) (natural? n))
      (if (= n 0) 1
          (if (even? n) (sqr (power r (/ n 2))) (* r (power r (- n 1)))))
      false))

; Aufgabe 2.3
; Wie lang muss die Rekursion sein?
(define (e_help x)
  (if (< x 100)
      (+ (/ x (fakultät (- x 1))) (e_help (+ x 1))) 0))

(define (e x)
  (/ (e_help x) 2))

(* (e 1) (expt 10 1001))

; Aufgabe 2.4
; irgendwas ist falsch, ich komme bei 2,4929.. raus
(define (pi_help x y)
  (if (< x 1000)
  (if (= y 1)
      (+ (/ 1 x) (pi_help (+ x 2) 0))
      (- (/ 1 x) (pi_help (+ x 2) 1)))
  0))

(define (my_pi x y)
  (* (pi_help x y) 4))

(my_pi 1 0)

; Aufgabe 3
(define (type-of exp)
   (cond
    [(boolean? exp) 'Boolean]
    [(list? exp) 'List]
    [(pair? exp) 'Pair]
    [(symbol? exp) 'Symbol]
    [(number? exp) 'Number]
    [(char? exp) 'Char]
    [(string? exp) 'String]
    [(vector? exp) 'Vector]
    [(procedure? exp) 'Procedure]
    [else "Type not defined"]))

(define (id z) z)

; (type-of (* 2 3 4)) -> 'Number
; Begründung: (* 2 3 4) ergibt 24, das eine Nummer ist
; (type-of (not 42)) -> 'Boolean
; Begründung: der Ausdruck (not 42) ergibt #f
; (type-of '(eins zwei drei)) -> 'List
; Begründung: '(ein zwei drei) ist eine Liste (allerdings auch ein Pair; list? steht aber im cond vor pair?; pair? würde ausgegeben beispielsweise bei (type-of (cons 1 2)))
; (type-of '()) -> 'List
; Begründung: '() ist eine leere Liste
; (type-of (id sin)) -> 'Procedure
; Begründung: id nimmt einen Wert als Parameter und gibt ein Ergebnis aus und ist daher eine Operation
; (type-of (string-ref "SE3" 2)) -> 'Char
; Begründung: Mit der string-ref Anweisung wird der Charakter an Stelle 2 des Strings "SE3" ausgegeben
; (type-of (lambda (x) x)) -> 'Procedure
; Begründung: lambda nimmt einen Wert als Parameter und gibt ein Ergebnis aus und ist daher eine Operation
; (type-of type-of) -> 'Procedure
; Begründung: type-of prüft, was type-of ist. Da type-of eine Funktion ist, wird 'Procedure ausgegeben
; (type-of (type-of type-of)) -> 'Symbol
; Begründung: Bei (type-of type-of) wird 'Procedure ausgegeben. Dies ist wiederum ein Symbol. Daher gibt(type-of (type-of type-of)) als Ergebnis 'Symbol aus


