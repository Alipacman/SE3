#lang racket

;Aufgabe 1.1

#|
a) Funktion (take n xs)

Bei der Funktion take handelt es sich um eine lineare Rekursion über eine Liste.
Die sich auf der rechten Seite der definierenden Gleichung in jeder Fallunterscheidung
selbst nur einmal verwendet.

b) Funktion (drop n xs)

c) Funktion (merge rel<? xs ys)
Es handelt sich bei der merge um eine baumartige Rekursion, da in der
Fallunterscheidung mehrfach auf die Definition Bezug genommen wird.

d) Funktion (merge-sort rel<? xs)
Es handelt sich bei der merge um eine baumartige Rekursion, da in der
Fallunterscheidung mehrfach auf die Definition Bezug genommen wird.
Nicht um eine Geschachtelte Rekursion, da andere Funktionen als übergeben hat
|#


(define (drop n xs) ;; das Endst\"uck
  (cond
((null? xs) '()) ((= 0 n) xs) (else (drop (- n 1) (cdr xs)))))

(define (take n xs)
(cond
((null? xs) '())
((= 0 n) '())
(else (cons (car xs)
(take (- n 1) (cdr xs))))))